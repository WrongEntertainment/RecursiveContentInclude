#!/usr/bin/env node

/**
 * Module dependencies.
 */
var program = require('commander');
var CommanderUtils = require('commander-utils');
var pkg = require('../package.json');
var fs = require('fs');
var Resi = require('../lib');
var util = require('util');

/**
 * Initialize the commander-utils module.
 */
CommanderUtils(program, pkg);

/**
 * Set some commander-utils specific settings.
 */
program
  .setDescription('Recursive Content Include')
  .addExamples([
    { description: 'Process a local file and print the result to console.',
      command:     'resi --input path/to/file.txt' },
    { description: 'Request a file and process it. Print the result to console.',
      command:     'resi --input http://url.to.file/' },
    { description: 'Process a file with custom begin/end tags (mustache style).',
      command:     'resi --begin-tag {{ --end-tag }} --input path/to/file.txt' }
  ]);

/**
 * The tool options.
 */
program
  .option('-i, --input <File>', 'the input, local file or web url')
  .option('-o, --output <File>', 'the file output')
  .option('--open-tag <String>', 'set the begin tag')
  .option('--close-tag <String>', 'set the end tag')
  .option('-e, --eval <String>', 'pass a string from the command line as input')
  .option('-t, --tokens', 'print out the tokens that the lexer produce');

/**
 * Parse it.
 */
program.parseUtils(process.argv);

/**
 * Variables
 */
var openTag = '<%>';
var closeTag = '</%>';

/**
 * Some helper functions we need at the cli.
 */
var helper = {
  /**
   * save the file if the --output option was set.
   */
  output: function(data) {
    if (program.output) {
      program.log.info('Write file to ' + program.output);
      fs.writeFile(program.output, data, 'utf8', function() {
        program.log.info('File writer ready!');
      });
    }
    else {
      program.log.info(data);
    }
  },

  outputTokens: function(content) {
    var tokens = resi.lexer.tokenize(content, openTag, closeTag);
    program.log.info(util.inspect(tokens, false, null));
  }
};

/**
 * Optional options
 */
if (program.openTag) {
  openTag = program.openTag;
  program.log.info('Set the open Tag to: ' + openTag);
}
if (program.closeTag) {
  closeTag = program.closeTag;
  program.log.info('Set the close Tag to: ' + closeTag);
}

resi = new Resi(openTag, closeTag);

/**
 * The input
 */
if (program.input) {
  // Check if the input is an url.
  if (resi.lexer.isHttp(program.input)) {
    var request = require('request');
    request(program.input, function (error, response, body) {
      if (!error && response.statusCode == 200) {
        // Print only the lexer tokens
        if (program.tokens) {
          helper.outputTokens(body);
        }
        // compile it
        else {
          var data = resi.compile(body, openTag, closeTag);
          helper.output(data);
        }
      }
      else {
        program.log.warn('Request failed.');
        program.log.warn('Check if the web url is correct.');
        program.log.warn(error);
      }
    });

    // TODO: remove request module.
    /*
    var http = require('https');
    http.get(program.input, function(res) {
      console.log("Got response: " + res.statusCode);
      // Print only the lexer tokens
      if (program.tokens) {
        console.log('TODO, show tokens');
        resi.lexer.tokenize(res.body, openTag, closeTag);
      }
      // compile it
      else {
        var data = resi.compile(res.body, openTag, closeTag);
        helper.output(data);
      }

    }).on('error', function(e) {
      program.log.warn('Request failed.');
      program.log.warn('Check if the web url is correct.');
      program.log.warn("Got error: " + e.message);
    });
    */

  }
  // If it is no weburl, read the file
  else {
    // Print only the lexer tokens
    if (program.tokens) {
      helper.outputTokens(fs.readFileSync(program.input, 'utf8'));
    }
    // compile it
    else {
      var data = resi.readFileSync(program.input, openTag, closeTag);
      helper.output(data);
    }
  }
}
// If we run the --eval mode
else if (program.eval) {
  if (program.tokens) {
    helper.outputTokens(program.eval);
  } else {
    program.log.info(resi.compile(program.eval, openTag, closeTag));
  }
}
// If no input was set, log a warning message.
else {
  program.log.warn('resi-warn: missing input');
  program.log.warn('Please check the examples at the --help usage information.');
}
